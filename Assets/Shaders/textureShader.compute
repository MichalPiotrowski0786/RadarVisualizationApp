#pragma kernel Main

RWTexture2D<float4> tex2d;
Texture2D<float4> cmap;
RWStructuredBuffer<float> _data;

int rays, bins, type;
float _dmin, _dmax;

float invLerp(float from, float to, float value){
  return (value - from) / (to - from);
}

uint2 getTextureProperties(Texture2D<float4> _tex){
    uint len;
    uint stride;
    _tex.GetDimensions(len, stride);

    return uint2(len,stride);
}

uint2 getRWTextureProperties(RWTexture2D<float4> _tex){
    uint len;
    uint stride;
    _tex.GetDimensions(len, stride);

    return uint2(len,stride);
}

uint2 getBufferProperties(StructuredBuffer<float> _buff){
    uint len;
    uint stride;
    _buff.GetDimensions(len, stride);

    return uint2(len,stride);
}

uint2 getRWBufferProperties(RWStructuredBuffer<float> _buff){
    uint len;
    uint stride;
    _buff.GetDimensions(len, stride);

    return uint2(len,stride);
}

float4 colored(float v){
    int cmap_len = getTextureProperties(cmap).x;
    int v_index = v*cmap_len;
    
    float4 col = float4(cmap[int2(v_index,0)].rgb,0.8);
    if(v < 0.01) col.a = 0.0;

    return col;
}

[numthreads(1,1,1)]
void Main (uint3 id : SV_DispatchThreadID)
{
    int index = id.y+(rays-id.x)*bins;
    float value = invLerp(_dmin,_dmax,_data[index]);
    float4 rgba = colored(value);
    
    tex2d[id.xy] = rgba;
}
